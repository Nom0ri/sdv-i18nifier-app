import{_ as f,o as g,c as T,a as c,d as p,v as h}from"./index-84b72349.js";import{_ as d}from"./copy-icon-286decec.js";const $={data(){return{inputText:"",contentText:"",i18nText:"",customPrefix:"",separator:"",customImport:""}},computed:{ImportToken(){return this.customImport.length>0?`${this.customImport}`:"ImportToken"}},watch:{inputText:{handler(n){this.processData(n)}},customPrefix:{handler(){this.processData(this.inputText)}},customImport:{handler(){this.processData(this.inputText)}}},methods:{checkInput(n){const t=/\|inputSeparator/g,s=(n.match(t)||[]).length,i=/"(.*?)":/g,e=(n.match(i)||[]).length,a=/\[\#\][^\"]/g,o=(n.match(a)||[]).length;return s>1?(this.contentText="Input only one line of random dialogue.",this.i18nText="Maybe I'll add the ability to convert more at once later.",!1):s===1&&e>1?(this.contentText="Don't mix random and regular dialogue.",this.i18nText="Maybe I'll add the ability to convert more at once later.",!1):o!==0&&o<e?(this.contentText=`It seems some mails are missing titles, they are optional, but it's still nice to have them.

 Add this to the end of the entry: [#]title`,this.i18nText="I'm not just saying it, because I can't find a way to distinguish mails from dialogues without it... definitely not.",!1):!0},cutString(n){const t=/\|inputSeparator=(..)/,s=n.match(t),i=/(?:\[\#\])(.*?)(?=\")/g,e=n.match(i);return s?(this.separator=s[1],this.cutStringWithSeparator(n)):e?this.cutMail(n):this.cutStringWithoutSeparator(n)},cutStringWithSeparator(n){const t=/"(.*?)"/g,[,s]=t.exec(n)||[];if(!s)return console.error("Token not found."),{cuts:[],separatorMatch:!0};const i=new RegExp(`(?:Random: ?|${this.separator}|inputSeparator=${this.separator})(.*?)(?=(?:${this.separator}|\\||$))`,"g"),e=[];let a;for(;(a=i.exec(n))!==null;)e.push(a[1]);return{cuts:e.map(r=>{const u=r.split(this.separator).map(l=>l.trim());return{token:s,randomItems:u}}),separatorMatch:!0}},cutStringWithoutSeparator(n){const t=/"((?:\\.|[^"\\])*)":\s*"((?:\\.|[^"\\])*)"/g,s=[];let i;for(;(i=t.exec(n))!==null;){const[,e,a]=i,o=e.replace(/\\(")/g,'\\"'),r=a.replace(/\\(")/g,'\\"');s.push({token:o,dialogue:r})}return{cuts:s,separatorMatch:!1}},cutMail(n){const t=new RegExp('"(.*?)(?<!\\\\)": "(.*?(?<!\\\\))(?="|%|\\[#]|$)',"g"),s=/(?:\[\#\])(.*?)(?=\")/g,i=[];let e,a={};for(;(e=t.exec(n))!==null;){const o=e[1],r=e[2].trim(),u=s.exec(n);if(u!==null){const l=u[1];a={mailToken:o,mailText:r,mailTitle:l},i.push(a)}}return{cuts:i,mailMatch:!0}},processDataWithoutSeparator(n){let t="",s="";for(const i of n){const{token:e,dialogue:a}=i,o=this.customPrefix?`${this.customPrefix}.`:"",r=this.dynamicTokenCheck(a);t+=`${r?`"${e}": "{{i18n:${o}${e} {{${this.ImportToken}}} }}",
`:`"${e}": "{{i18n:${o}${e}}}",
`}`,s+=`"${o}${e}": "${a}",
`}this.contentText=t,this.i18nText=s},processDataWithSeparator(n){let t="",s="",i={},e="";for(const a of n){const{token:o,randomItems:r,dialogue:u}=a,l=this.customPrefix?`${this.customPrefix}.`:"",x=`${this.dynamicTokenCheck(r)?` {{${this.ImportToken}}} `:""}`;if(r){i[o]||(i[o]=0);const m=i[o]++;e+=`{{i18n:${l}${o}.${m}${x}}} ${this.separator} `,s+=`"${l}${o}.${m}": "${r[0].trim()}",
`}else t+=`"${o}": "{{i18n:${l}${o}}}",
`,s+=`"${l}${o}": "${u}",
`,e&&(t+=`"${o}": "{{Random: ${e}}},
`,e="")}e&&(t+=`"${n[n.length-1].token}": "{{Random: ${e}}},`,t=t.slice(0,-6)+`|inputSeparator=${this.separator}}}",
`),this.contentText=t,this.i18nText=s},processMailData(n){let t=this.inputText,s="";const i=this.customPrefix?`${this.customPrefix}.`:"";for(const e of n){const{mailToken:a,mailTitle:o,mailText:r}=e,l=`${this.dynamicTokenCheck(r)?` {{${this.ImportToken}}} `:""}`;s+=`"${i}${a}.title": "${o}",
`,s+=`"${i}${a}.text": "${r}",
`,t=t.replace(r,`{{i18n:${i}${a}.text${l}}}`),t=t.replace(o,`{{i18n:${i}${a}.title}}`)}this.contentText=t.trim()+`
`,this.i18nText=s.trim()},processData(){const n=this.inputText;if(!this.checkInput(n))return;const{cuts:s,separatorMatch:i,mailMatch:e}=this.cutString(n);i?this.processDataWithSeparator(s):e?this.processMailData(s):this.processDataWithoutSeparator(s)},dynamicTokenCheck(n){const t=/[^"]*({{[^}]*}})[^"]*/g;let s;return(s=t.exec(n))!==null&&s[0].length>4},copyToClipboard(n){document.getElementById(n).select(),document.execCommand("copy"),window.getSelection().removeAllRanges()}}},k={class:"input-page"},y=c("h2",{class:"page-header text-2xl mb-4"},"Dialogues",-1),I={class:"input-containers-wrapper"},C={class:"input-container left"},R={class:"input-container right"},b={class:"copy-button-placement"},D={class:"copy-button-placement"};function M(n,t,s,i,e,a){return g(),T("div",k,[y,c("div",I,[c("div",C,[p(c("textarea",{class:"input-field hide-scroll",placeholder:"Input entry",id:"input-data","onUpdate:modelValue":t[0]||(t[0]=o=>e.inputText=o)},null,512),[[h,e.inputText]]),p(c("input",{class:"prefix-field",type:"text",placeholder:"Custom Prefix","onUpdate:modelValue":t[1]||(t[1]=o=>e.customPrefix=o)},null,512),[[h,e.customPrefix]]),p(c("input",{class:"prefix-field",type:"text",placeholder:"Custom Import Token","onUpdate:modelValue":t[2]||(t[2]=o=>e.customImport=o)},null,512),[[h,e.customImport]])]),c("div",R,[c("div",b,[p(c("textarea",{class:"input-field button-padding hide-scroll",placeholder:"Content.json",id:"content-field",readonly:"","onUpdate:modelValue":t[3]||(t[3]=o=>e.contentText=o)},null,512),[[h,e.contentText]]),c("img",{class:"copy-button",onClick:t[4]||(t[4]=o=>a.copyToClipboard("content-field")),src:d,alt:"Copy Content",title:"Copy"})]),c("div",D,[p(c("textarea",{class:"input-field button-padding hide-scroll",placeholder:"i18n",id:"i18n-field",readonly:"","onUpdate:modelValue":t[5]||(t[5]=o=>e.i18nText=o)},null,512),[[h,e.i18nText]]),c("img",{class:"copy-button",onClick:t[6]||(t[6]=o=>a.copyToClipboard("i18n-field")),src:d,alt:"Copy i18n",title:"Copy"})])])])])}const _=f($,[["render",M]]);export{_ as default};
